// Generated by CoffeeScript 1.9.1

/**
 * gulpfile
 * @date 2014-12-2 15:57:21
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var _cfg, _cfgData, _cfgFile, build, cfg, color, cp, env, exec, fs, gulp, gutil, helper, isDebug, jsdoc, path, release;

fs = require('fs');

path = require('path');

gulp = require('gulp');

jsdoc = require('gulp-jsdoc');

gutil = require('gulp-util');

color = gutil.colors;

cp = require('child_process');

exec = cp.exec;

helper = function() {
  gutil.log(color.yellow.bold("前端开发框架使用说明："));
  gutil.log(color.cyan("以gulp命令启动程序，它可接收两个参数，分别是"));
  gutil.log(color.cyan("参数1： --env 或者 --e"));
  gutil.log(color.cyan("此参数是环境参数，默认值为'local'，其他值分别为test、rc、www"));
  gutil.log(color.cyan("参数1： --debug 或者 --d"));
  gutil.log(color.cyan("此参数为调试开关，默认值为false"));
  gutil.log(color.yellow.bold("eg: "));
  gutil.log(color.cyan("1、local开发环境的watch命令："));
  gutil.log(color.cyan("gulp 或者 gulp --e local 或者 gulp --env local"));
  gutil.log(color.cyan("2、local开发环境的debug命令："));
  gutil.log(color.cyan("gulp --d 或者 gulp --env local --d"));
  gutil.log(color.cyan("3、test环境下发布代码："));
  return gutil.log(color.cyan("gulp --e test 或者 gulp --env test"));
};

gulp.task('helper', function() {
  return helper();
});

_cfgFile = path.join(process.env.INIT_CWD, 'config.json');

if (!fs.existsSync(_cfgFile)) {
  gutil.log(color.yellow("config.json is missing!"));
  _cfg = require('./data/default.json');
  _cfgData = JSON.stringify(_cfg, null, 4);
  fs.writeFileSync(_cfgFile, _cfgData, 'utf8');
  gutil.log(color.yellow("config.json rebuild success!"));
  gutil.log(color.green("Run Gulp Task again! Plzzzzz..."));
  gulp.task('default', [], function() {
    return helper();
  });
  return false;
}

cfg = require('./lib/config');

build = require('./lib/build');

env = cfg.env;

isDebug = cfg.isDebug;


/*
 * Initialization program
 */

gulp.task('init', function() {
  build.init();
  return exec("gulp -T", function(error, stdout, stderr) {
    console.log(stdout);
    return gulp.start(['helper']);
  });
});


/*
 * clean files
 */

gulp.task('del.data', function() {
  return build.files.delJson();
});

gulp.task('clean', function() {
  return build.files.delDistFiles();
});


/*
 * build sprite,less,css,js,tpl...
 */

gulp.task('jslibs', function() {
  return build.jsLibs();
});

gulp.task('jspaths', function() {
  return build.jsPaths();
});

gulp.task('cfg', function() {
  return build.cfg();
});

gulp.task('tpl', function() {
  return build.tpl2dev();
});

gulp.task('js2dev', function() {
  return build.js2dev();
});

gulp.task('js2dist', function() {
  return build.js2dist();
});

gulp.task('noamd', function() {
  return build.noamd();
});

gulp.task('corejs', function() {
  return build.corejs();
});

gulp.task('sprite', function() {
  return build.sprite();
});

gulp.task('bgmap', function() {
  return build.bgMap();
});

gulp.task('less', function() {
  return build.less2css();
});

gulp.task('css', function() {
  return build.bgMap(function() {
    return build.css2dist();
  });
});

gulp.task('map', function() {
  return build.json2dist(function() {
    return build.json2php();
  });
});


/*
 * push all files to dist
 */

gulp.task('all', function() {
  return build.all2dist();
});


/*
 * html demo files
 */

gulp.task('html', function() {
  return build.htmlctl();
});


/*
 * build bat tool
 */

gulp.task('doc', function() {
  return gulp.src([cfg.jsSrcPath + '**/*.js', './README.md']).pipe(jsdoc.parser({
    plugins: ['plugins/markdown'],
    markdown: {
      "parser": "gfm"
    }
  })).pipe(jsdoc.generator(cfg.docOutPath, {
    path: 'ink-docstrap',
    theme: 'Cerulean',
    systemName: 'v.Builder',
    linenums: true,
    collapseSymbols: true,
    inverseNav: false
  }, {
    "private": false,
    monospaceLinks: false,
    cleverLinks: true,
    outputSourceFiles: true
  }));
});


/*
 * watch tasks
 */

gulp.task('watch', function() {
  return build.autowatch(function() {

    /*
    clearTimeout _gitTimer if _gitTimer
    _gitTimer = setTimeout ->
        rootPath = path.join __dirname
        disk = rootPath.split('')[0]
        if disk != '/' 
            exec 'cmd ./bin/autogit.bat',(error, stdout, stderr)->
                console.log stdout
        else
            exec 'sh ./bin/autogit.sh',(error, stdout, stderr)->
                console.log stdout
    ,3000
     */
  });
});


/*
 * release function
 */

release = function() {
  return setTimeout(function() {
    return build.less(function() {
      return build.bgMap(function() {
        return build.css2dist(function() {
          return build.js(function() {
            return build.corejs(function() {
              return build.noamd(function() {
                return build.js2dist(function() {
                  return build.htmlctl(function() {
                    return build.json2dist(function() {
                      return build.json2php();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  }, 100);
};

gulp.task('default', [], function() {
  if (env === 'local' && !isDebug) {
    return setTimeout(function() {
      return build.less(function() {
        return build.js(function() {
          return build.htmlctl(function() {
            var _Timer;
            if (_Timer) {
              clearTimeout(_Timer);
            }
            return _Timer = setTimeout(function() {
              return gulp.start(['watch']);
            }, 2000);
          });
        });
      });
    }, 100);
  } else {
    return release();
  }
});

gulp.task('release', [], function() {
  return release();
});
