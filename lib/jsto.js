// Generated by CoffeeScript 1.9.1

/**
 * Build AMDmodule with ID
 * @date 2014-12-2 15:10:14
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var _, _buildJs, _buildPaths, _hashLen, _isCombo, _jsDevPath, _jsDistPath, _jsMapName, _jsPath, _mapPath, _stream, amdReg, amdclean, arrToString, binit, butil, color, config, depArrReg, errrHandler, expStr, filterDepMap, fs, gulp, gutil, madeModId, madeModList, md5, path, plumber, tryEval, uglify;

fs = require('fs');

path = require('path');

_ = require('lodash');

amdclean = require('amdclean');

config = require('./config');

gulp = require('gulp');

gutil = require('gulp-util');

uglify = require('gulp-uglify');

plumber = require('gulp-plumber');

color = gutil.colors;

_jsPath = config.jsSrcPath;

_jsDevPath = config.jsOutPath;

_jsDistPath = config.jsDistPath;

_jsMapName = config.jsMapName;

_mapPath = config.mapPath;

_hashLen = config.hashLength;

_isCombo = config.isCombo;

butil = require('./butil');

errrHandler = butil.errrHandler;

md5 = butil.md5;

binit = require('./binit');


/*
 * js 生产文件处理函数
 * @param {string} files 接收一个路径参数，同gulp.src
 * @param {function} cb 处理过程中，处理一个buffer流的回调
 * @param {function} cb2 所有buffer处理完成后的回调函数
 */

amdReg = /;?\s*define\s*\(([^(]*),?\s*?function\s*\([^\)]*\)/;

expStr = /define\s*\(([^(]*),?\s*?function/;

depArrReg = /^[^\[]*(\[[^\]\[]*\]).*$/;

tryEval = function(str) {
  var err, json;
  try {
    return json = eval('(' + str + ')');
  } catch (_error) {
    err = _error;
  }
};

filterDepMap = function(depMap) {
  depMap = depMap.filter(function(dep) {
    return ["require", "exports", "module", ""].indexOf(dep) === -1;
  });
  return depMap.map(function(dep) {
    return dep.replace(/\.js$/, '');
  });
};

madeModId = function(filepath) {
  return filepath.replace(/\\/g, '/').split('/js/')[1].replace(/.js$/, '');
};

madeModList = function(depArr, curPath) {
  var _arr;
  _arr = [];
  if (depArr.length > 0) {
    _.forEach(depArr, function(val) {
      var _filePath, _val;
      _val = val;
      if (_val.indexOf('../') === 0 || _val.indexOf('./') === 0) {
        _filePath = path.join(curPath, _val);
        _val = madeModId(_filePath);
      }
      return _arr.push(_val);
    });
  }
  return _arr;
};

arrToString = function(arr) {
  var _str;
  _str = "";
  if (arr.length > 0) {
    _.forEach(arr, function(val, n) {
      return _str += (n > 0 ? "," : "") + ("'" + val + "'");
    });
  }
  return "[" + _str + "]";
};

_stream = function(files, cb, cb2) {
  return gulp.src([files]).pipe(plumber({
    errorHandler: errrHandler
  })).on('data', function(source) {
    var _filePath, _list, _modId, _nameObj, _source;
    _list = [];
    _filePath = source.path.replace(/\\/g, '/');
    _nameObj = path.parse(_filePath);
    _nameObj.hash = md5(source.contents);
    _modId = madeModId(_filePath);
    _source = String(source.contents);
    if (_filePath.indexOf("/vendor/") === -1) {
      _source = _source.replace(amdReg, function(str, map) {
        var _arr, _depStr, _str, error;
        _depStr = map.replace(depArrReg, "$1");
        if (/^\[/.test(_depStr)) {
          _arr = tryEval(_depStr);
          try {
            _list = madeModList(filterDepMap(_arr), _nameObj.dir);
            _str = arrToString(_list);
            return str.replace(expStr, "define('" + _modId + "'," + _str + ",function");
          } catch (_error) {
            error = _error;
          }
        } else {
          return str.replace(expStr, "define('" + _modId + "',function");
        }
      });
    }
    return cb(_nameObj, _source);
  }).on('end', cb2);
};

_buildJs = function(name, source) {
  var _file;
  _file = path.join(_jsDevPath, name);
  butil.mkdirsSync(path.dirname(_file));
  return fs.writeFileSync(_file, source, 'utf8');
};

_buildPaths = binit.paths;


/*
 * Build AMDmodule with ID
 * @param {string} file 同gulp.src接口所接收的参数，默认是js debug目录中的所有js文件
 * @param {function} done 回调函数
 */

module.exports = function(file, done) {
  var _done, _file, _num;
  gutil.log("Build AMDmodule with ID");
  if (typeof file === 'function') {
    _done = file;
    _file = _jsPath + '**/*.js';
  } else {
    _file = file || _jsPath + '**/*.js';
    _done = done || function() {};
  }
  _num = 0;
  return _stream(_file, function(obj, source) {
    var _dir, _distname, _source;
    _source = source;
    _dir = obj.dir.split("/js/")[1];
    _distname = obj.name + obj.ext;
    _dir && (_distname = _dir + '/' + _distname);
    if (_num % 20 === 0 && _num > 15) {
      gutil.log('Building...');
    }
    _buildJs(_distname, _source);
    return _num++;
  }, function() {
    return _buildPaths('.js', function() {
      gutil.log(color.green('Build success!'));
      return _done();
    });
  });
};
