// Generated by CoffeeScript 1.9.1

/**
 * 生产文件控制类：队列、删除、生成hash map等
 * @date 2014-12-2 15:10:14
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var bgMap, config, cssMap, e, filesController, fs, gutil, jsMap, path,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

config = require('./config');

gutil = require('gulp-util');

jsMap = {};

cssMap = {};

bgMap = {};

try {
  jsMap = JSON.parse(fs.readFileSync(path.join(config.mapPath, config.jsDistMapName), 'utf8'));
  cssMap = JSON.parse(fs.readFileSync(path.join(config.mapPath, config.cssMapName), 'utf8'));
  bgMap = JSON.parse(fs.readFileSync(path.join(config.mapPath, config.cssBgMap), 'utf8'));
} catch (_error) {
  e = _error;
}


/*生产文件的控制基类 */

filesController = (function() {
  function filesController(ext) {
    this.ext = ext;
    this.delMap = bind(this.delMap, this);
  }

  filesController.prototype.path = function() {
    switch (this.ext) {
      case '.js':
        return config.jsDistPath;
      case '.css':
        return config.cssDistPath;
      case '.png':
        return config.spriteDistPath;
      case '.json':
        return config.mapPath;
    }
  };

  filesController.prototype.getList = function() {
    var _ext, _list, _path;
    try {
      _ext = this.ext;
      _path = this.path();
      _list = [];
      fs.readdirSync(_path).forEach(function(v) {
        if (v.indexOf(_ext) !== -1) {
          return _list.push(v);
        }
      });
      return _list;
    } catch (_error) {
      e = _error;
    }
  };

  filesController.prototype.checkList = function() {
    var _curMap, _ext, _list, _new_list, _temp, file, i, len, val;
    try {
      _ext = this.ext;
      _list = this.getList();
      _new_list = [];
      if (_ext !== ".js" && _ext !== ".css") {
        return _list;
      } else {
        _temp = [];
        _curMap = _ext === '.js' ? jsMap : cssMap;
        for (file in _curMap) {
          val = _curMap[file];
          _temp.push(file);
          _temp.push(val.distname);
        }
        for (i = 0, len = _list.length; i < len; i++) {
          file = _list[i];
          if (indexOf.call(_temp, file) < 0) {
            _new_list.push(file);
          }
        }
        return _new_list;
      }
    } catch (_error) {
      e = _error;
    }
  };

  filesController.prototype.delList = function() {
    var _ext, _file, _list, _path, f, i, len, results;
    try {
      _ext = this.ext;
      _list = this.checkList();
      console.log(_list);
      if (_list.length === 0) {
        console.log("Nothing need delete!");
        return false;
      }
      _path = this.path();
      results = [];
      for (i = 0, len = _list.length; i < len; i++) {
        f = _list[i];
        _file = path.join(_path, f);
        gutil.log("delete --> " + _file);
        results.push(fs.unlinkSync(_file));
      }
      return results;
    } catch (_error) {
      e = _error;
    }
  };

  filesController.prototype.delMap = function() {
    var _ext, _mapFiles, _path, file, i, len, results;
    try {
      _ext = this.ext;
      if (_ext !== '.json') {
        return false;
      }
      _mapFiles = this.getList();
      _path = this.path();
      results = [];
      for (i = 0, len = _mapFiles.length; i < len; i++) {
        file = _mapFiles[i];
        results.push(fs.writeFileSync(path.join(_path, file), '{}', 'utf8'));
      }
      return results;
    } catch (_error) {
      e = _error;
    }
  };

  return filesController;

})();

module.exports = filesController;
