// Generated by CoffeeScript 1.9.1

/**
 * CSS自动化构建模块
 * @date 2014-12-2 15:10:14
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var _lessToCss, _pngsToOneImg, _spToLess, butil, color, config, errrHandler, fs, gulp, gutil, less, mincss, path, plumber, spBuilder, spStatus, spctl, sprite;

fs = require('fs');

path = require('path');

config = require('../config');

gulp = require('gulp');

sprite = require('gulp.spritesmith');

less = require('gulp-less');

mincss = require('gulp-minify-css');

plumber = require('gulp-plumber');

gutil = require('gulp-util');

color = gutil.colors;

spctl = require('./spctl');

spStatus = spctl.status;

spBuilder = spctl.builder;

butil = require('./butil');

errrHandler = butil.errrHandler;


/*
 * PNGs combine to one image and build LESS demo
 */

_pngsToOneImg = function(floder, callback) {
  var _floder, _method, _pngSrc, _sp_bg_url, _sp_png, error, option, spriteData;
  _floder = floder;
  _pngSrc = path.join(config.spriteSrcPath, _floder, '*.png');
  _sp_png = path.join(config.spriteImgOutPath, _floder + '.png');
  _sp_bg_url = '../_img/sp/' + _floder + '.png';
  _method = new spStatus(_floder).getBuildMethod();
  option = {
    algorithm: _method,
    padding: 10,
    imgName: _floder + ".png",
    cssName: "_" + _floder + ".less",
    cssFormat: 'css',
    imgPath: _sp_bg_url,
    cssOpts: {
      cssSelector: function(item) {
        return ".icon-" + _floder + "-" + item.name + "()";
      }
    }
  };
  spriteData = gulp.src(_pngSrc).pipe(sprite(option));
  try {
    spriteData.img.pipe(gulp.dest(config.spriteImgOutPath)).on('end', function() {
      return spriteData.css.pipe(gulp.dest(config.spriteLessOutPath)).on('end', function() {
        return callback();
      });
    });
  } catch (_error) {
    error = _error;
    gutil.log("Error: " + _sp_png);
    gutil.log(error);
  }
};


/*
 * 生成雪碧图和雪碧图map
 * @param  _type 1:所有未生成LESS或PNG的目录  2: 未生成PNG的目录   3: 未生成LESS的目录  默认所有目录
 */

_spToLess = function(type, cb) {
  var _bder, _buildMap, _cb, _newBuildFolders, _num, _type, folder, i, len, results, spmapData, total;
  if (typeof type === 'function') {
    _cb = type;
    cb = null;
    _type = 0;
  } else {
    _type = type;
    _cb = cb || function() {};
  }
  _bder = new spBuilder();
  spmapData = _bder.buildSpriteMap();
  _buildMap = function(callback) {
    var mapDataStr;
    mapDataStr = JSON.stringify(spmapData, null, 4);
    fs.writeFileSync(config.spriteDataPath, mapDataStr, 'utf8');
    return callback();
  };
  _newBuildFolders = (function() {
    switch (_type) {
      case 1:
        return _bder.getAllNewBuildList();
      case 2:
        return _bder.getNewBuildPngFolders();
      case 3:
        return _bder.getNewBuildLessFloders();
      default:
        return _bder.getAllSpFolders();
    }
  })();
  total = _newBuildFolders.length;
  _num = 0;
  if (total > 0) {
    gutil.log('Conbine PNG images into one image!');
    results = [];
    for (i = 0, len = _newBuildFolders.length; i < len; i++) {
      folder = _newBuildFolders[i];
      results.push(_pngsToOneImg(folder, function() {
        _num++;
        _num % 10 === 1 && gutil.log('Waitting...');
        if (_num === total) {
          return _buildMap(function() {
            gutil.log(color.green('Sprite IMG and LESS build success'));
            return _cb();
          });
        }
      }));
    }
    return results;
  }
};


/*
 * 从less生成css源码
 */

_lessToCss = function(cb) {
  var _cb, _src, lessOutPush;
  _cb = cb || function() {};
  _src = [path.join(config.lessPath, '*.less'), "!" + (path.join(config.lessPath, '_*.less'))];
  return lessOutPush = gulp.src(_src).pipe(plumber({
    errorHandler: errrHandler
  })).pipe(less({
    compress: false,
    paths: [config.lessPath]
  })).pipe(gulp.dest(config.cssOutPath)).on('end', function() {
    return _cb();
  });
};

exports.png2img = _pngsToOneImg;

exports.sp2less = _spToLess;

exports.less2css = _lessToCss;
