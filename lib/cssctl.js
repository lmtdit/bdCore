// Generated by CoffeeScript 1.9.1

/**
 * 将CSS的debug文件push到生产目录，并将引用到的背景图片自动添加hash后缀
 * @date 2014-12-2 15:10:14
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var _, _buildCss, _buildCssMap, _cssDistPath, _cssMapName, _cssPath, _hashLen, _isCombo, _mapPath, _stream, butil, color, config, errrHandler, fs, gulp, gutil, md5, mincss, path, plumber, pushCss;

fs = require('fs');

path = require('path');

_ = require('lodash');

config = require('../config');

gulp = require('gulp');

gutil = require('gulp-util');

mincss = require('gulp-minify-css');

plumber = require('gulp-plumber');

color = gutil.colors;

_cssPath = config.cssOutPath;

_cssDistPath = config.cssDistPath;

_cssMapName = config.cssMapName;

_mapPath = config.mapPath;

_hashLen = config.hashLength;

_isCombo = config.isCombo;

butil = require('./butil');

errrHandler = butil.errrHandler;

md5 = butil.md5;


/*
 * 替换css的背景图片路径，添加hash戳
 * @param {string} files 接收一个路径参数，同gulp.src
 * @param {function} cb 处理过程中，处理一个buffer流的回调
 * @param {function} cb2 所有buffer处理完成后的回调函数
 */

_stream = function(files, cb, cb2) {
  var cssBgMap;
  cssBgMap = JSON.parse(fs.readFileSync(path.join(_mapPath, config.cssBgMap), 'utf8'));
  return gulp.src([files]).pipe(plumber({
    errorHandler: errrHandler
  })).pipe(mincss({
    keepBreaks: false,
    compatibility: {
      properties: {
        iePrefixHack: true,
        ieSuffixHack: true
      }
    }
  })).on('data', function(source) {
    var _nameObj, _source, cssBgReg;
    _nameObj = path.parse(source.path);
    _nameObj.hash = md5(source.contents);
    cssBgReg = /url\s*\(([^\)]+)\)/g;
    _source = String(source.contents).replace(cssBgReg, function(str, map) {
      var key, val;
      key = map.replace('../_img/', '').replace(/(^\'|\")|(\'|\"$)/g, '');
      val = _.has(cssBgMap, key) ? '../../img/' + cssBgMap[key].distname : (map.indexOf('data:') > -1 || map.indexOf('about:') > -1 ? map : '../../img/' + key + '?=t' + String(new Date().getTime()).substr(0, 8));
      return str.replace(map, val);
    });
    return cb(_nameObj, _source);
  }).on('end', cb2);
};

_buildCss = function(name, source) {
  butil.mkdirsSync(_cssDistPath);
  return fs.writeFileSync(path.join(_cssDistPath, name), source, 'utf8');
};

_buildCssMap = function(data, cb) {
  var jsonData;
  jsonData = JSON.stringify(data, null, 2);
  butil.mkdirsSync(_mapPath);
  fs.writeFileSync(path.join(_mapPath, _cssMapName), jsonData, 'utf8');
  return cb();
};


/*
 * css生产文件构建函数
 * @param {string} file 同gulp.src接口所接收的参数，默认是css debug目录的所有css文件
 * @param {function} done 回调函数
 */

pushCss = function(file, done) {
  var _done, _file, cssMap;
  cssMap = {};
  gutil.log("Push Css to dist.");
  if (!file) {
    _done = function() {};
    _file = _cssPath + '*.css';
  } else if (typeof file === 'function') {
    _done = file;
    _file = _cssPath + '*.css';
  } else {
    _file = file;
    _done = done;
  }
  return _stream(_file, function(obj, source) {
    var _distname, _source;
    _source = source;
    _distname = obj.name + (!_isCombo ? '.' + obj.hash.substr(0, _hashLen) : '') + obj.ext;
    cssMap[obj.base] = {
      hash: obj.hash,
      distname: _distname
    };
    return _buildCss(_distname, _source);
  }, function() {
    return _buildCssMap(cssMap, function() {
      gutil.log(color.green('Pushed!'));
      return _done();
    });
  });
};

module.exports = pushCss;
