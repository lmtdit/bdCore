// Generated by CoffeeScript 1.9.1

/*
 * 项目初始化
 */
var Imagemin, _, butil, color, config, errrHandler, fs, gulp, gutil, hashLength, imgmin, mapPath, md5, objMixin, path, rename,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

_ = require('lodash');

gulp = require('gulp');

gutil = require('gulp-util');

color = gutil.colors;

imgmin = require('gulp-imagemin');

rename = require('gulp-rename');

butil = require('./butil');

config = require('../config');

errrHandler = butil.errrHandler;

objMixin = butil.objMixin;

md5 = butil.md5;

hashLength = config.hashLength;

mapPath = config.mapPath;

Imagemin = require('imagemin');


/*
 * init dist, cache and watch DIRS
 */

exports.dir = function() {
  var _dir, i, init_dir, len, results;
  init_dir = [config.rootPath, config.lessPath, config.jsSrcPath, config.tplSrcPath, config.htmlTplSrc, config.spriteSrcPath, config.spriteLessOutPath, config.cssDistPath, config.jsDistPath, config.tplDistPath, config.mapPath, config.spriteDistPath, config.cssBgDistPath, config.jsOutPath, config.tplOutPath, config.cssOutPath, config.spriteImgOutPath];
  results = [];
  for (i = 0, len = init_dir.length; i < len; i++) {
    _dir = init_dir[i];
    butil.mkdirsSync(_dir);
    results.push(gutil.log(_dir + " made success!"));
  }
  return results;
};


/*
 * init map file
 */

exports.map = function() {
  var _dirpath, _file, i, init_file, len, new_file, results;
  init_file = [config.jsMapName, config.cssMapName];
  results = [];
  for (i = 0, len = init_file.length; i < len; i++) {
    _file = init_file[i];
    _dirpath = path.dirname(_file);
    !fs.existsSync(_dirpath) && butil.mkdirsSync(_dirpath);
    new_file = path.join(config.mapPath, _file);
    !fs.existsSync(new_file) && fs.writeFileSync(new_file, "{}", 'utf8');
    results.push(gutil.log("" + config.mapPath + _file + " made success!"));
  }
  return results;
};


/*
 * build images
 */

exports.bgmap = function(cb) {
  var _cb, _imgSrcPath, _map, jsonData, makePaths;
  _cb = cb || function() {};
  _map = {};
  _imgSrcPath = path.join(config.rootPath, config.imgSrcPath);
  makePaths = function(sup_path) {
    var _ext, _sup_path;
    _sup_path = sup_path || _imgSrcPath;
    _ext = ['.png', '.jpg', '.gif'];
    return fs.readdirSync(_sup_path).forEach(function(v) {
      var _distname, _hash, _imgmin, _name, _str, _this_ext, ref, sub_Path;
      sub_Path = path.join(_sup_path, v);
      if (fs.statSync(sub_Path).isDirectory()) {
        return makePaths(sub_Path);
      } else if (fs.statSync(sub_Path).isFile() && v.indexOf('.') !== 0 && (ref = path.extname(sub_Path), indexOf.call(_ext, ref) >= 0)) {
        _name = sub_Path.replace(_imgSrcPath, '').replace(/\\\\/g, '/').replace(/\\/g, '/');
        _this_ext = path.extname(_name);
        _str = String(fs.readFileSync(sub_Path, 'utf8'));
        _hash = md5(_str);
        _distname = _name.replace(_this_ext, '.') + _hash.substring(0, hashLength) + _this_ext;
        _map[_name] = {};
        _map[_name].hash = _hash;
        _map[_name].distname = _distname.replace(/\\\\/g, '/').replace(/\\/g, '/');
        _imgmin = new Imagemin().src(sub_Path).dest(config.imgDistPath).use(rename(_distname));
        return _imgmin.run(function(err, files) {
          return err && (function() {
            throw err;
          })();
        });
      }
    });
  };
  makePaths(_imgSrcPath);
  jsonData = JSON.stringify(_map, null, 2);
  !fs.existsSync(mapPath) && butil.mkdirsSync(mapPath);
  fs.writeFileSync(path.join(mapPath, config.cssBgMap), jsonData, 'utf8');
  gutil.log(color.green(config.cssBgMap + " build success"));
  return _cb();
};


/*
 * build the three part's js/css paths map
 */

exports.paths = function(ext, cb) {
  var _cb, _cssPath, _ext, _isCombo, _jsPath, _map, _mapName, _path, jsonData, makePaths;
  if (typeof ext === 'function') {
    _ext = '.js';
    _cb = ext;
  } else {
    _ext = ext || '.js';
    _cb = cb || function() {};
  }
  _map = {};
  _jsPath = path.join(config.rootPath, config.jsSrcPath);
  _cssPath = path.join(config.rootPath, config.cssOutPath);
  _path = _ext === '.js' ? _jsPath : _cssPath;
  _mapName = _ext === '.js' ? config.jsMapName : config.cssMapName;
  _isCombo = config.isCombo;
  makePaths = function(sup_path) {
    var _sup_path;
    _sup_path = sup_path || _path;
    return fs.readdirSync(_sup_path).forEach(function(v) {
      var _basename, _hash, _name, _nameObj, _str, sub_Path;
      sub_Path = path.join(_sup_path, v);
      if (fs.statSync(sub_Path).isDirectory()) {
        return makePaths(sub_Path);
      } else if (fs.statSync(sub_Path).isFile() && v.indexOf('.') !== 0 && path.extname(sub_Path) === _ext) {
        _str = String(fs.readFileSync(sub_Path, 'utf8'));
        _basename = sub_Path.replace(_path, '').replace(/\\\\/g, '/').replace(/\\/g, '/');
        _hash = md5(_str);
        _name = _basename;
        if (!_isCombo) {
          _nameObj = path.parse(sub_Path.replace(_path, ''));
          _nameObj.hash = md5(_str);
          _name = _nameObj.dir + '/' + _nameObj.name + '.' + _hash.substring(0, hashLength) + _nameObj.ext;
        }
        return _map[_basename] = {
          hash: _hash,
          distname: _name.replace(/\\\\/g, '/').replace(/\\/g, '/')
        };
      }
    });
  };
  makePaths(_path);
  jsonData = JSON.stringify(_map, null, 2);
  !fs.existsSync(mapPath) && butil.mkdirsSync(mapPath);
  fs.writeFileSync(path.join(mapPath, _mapName), jsonData, 'utf8');
  gutil.log(color.green(_mapName + " build success"));
  return _cb();
};


/*
 * build the three part's js libs paths
 */

exports.libs = function(cb) {
  var _cb, jsonData, namePaths;
  _cb = cb || function() {};
  namePaths = {};
  fs.readdirSync(config.jsLibPath).forEach(function(v) {
    var jsLibPath;
    jsLibPath = path.join(config.jsLibPath, v);
    if (fs.statSync(jsLibPath).isDirectory()) {
      return fs.readdirSync(jsLibPath).forEach(function(f) {
        var jsPath;
        jsPath = path.join(jsLibPath, f);
        if (fs.statSync(jsPath).isFile() && f.indexOf('.') !== 0 && f.indexOf('.js') !== -1) {
          return namePaths[v] = "vendor/" + v + "/" + (f.replace('.js', ''));
        }
      });
    }
  });
  jsonData = JSON.stringify(namePaths, null, 2);
  !fs.existsSync(config.dataPath) && butil.mkdirsSync(config.dataPath);
  fs.writeFileSync(path.join(config.dataPath, config.jsLibsMapName), jsonData, 'utf8');
  gutil.log(color.green(config.jsLibsMapName + " build success"));
  return _cb();
};


/*
 * build require.config
 */

exports.cfg = function(cb) {
  var _cb, configStr, configStr_dev, jsLibPaths, jsPaths, jsSrcPath, key, newPaths, rCfg, rCfg_dev, shimData, val;
  _cb = cb || function() {};
  shimData = JSON.parse(fs.readFileSync(path.join(config.dataPath, 'shim.json'), 'utf8'));
  jsLibPaths = JSON.parse(fs.readFileSync(path.join(config.dataPath, config.jsLibsMapName), 'utf8'));
  jsPaths = JSON.parse(fs.readFileSync(path.join(config.dataPath, 'paths.json'), 'utf8'));
  newPaths = {};
  for (key in jsLibPaths) {
    val = jsLibPaths[key];
    if (key !== 'require' && key !== 'almond') {
      newPaths[key] = val;
    }
  }
  rCfg_dev = {
    baseUrl: config.staticPath + 'js',
    paths: _.extend(newPaths, jsPaths),
    shim: shimData
  };
  rCfg = {
    baseUrl: config.staticPath + '_js',
    paths: _.extend(newPaths, jsPaths),
    shim: shimData
  };
  jsSrcPath = config.jsSrcPath;
  configStr_dev = "require.config(" + (JSON.stringify(rCfg_dev, null, 2)) + ");\n";
  configStr = "require.config(" + (JSON.stringify(rCfg, null, 2)) + ");\n";
  fs.writeFileSync(path.join(jsSrcPath, "config.dev.js"), configStr_dev, 'utf8');
  fs.writeFileSync(path.join(jsSrcPath, "config.js"), configStr, 'utf8');
  gutil.log(color.green("config.js build success!"));
  return _cb();
};
