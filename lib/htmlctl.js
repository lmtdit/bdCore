// Generated by CoffeeScript 1.9.1

/*
 * 服务端html模板构建和压缩模块
 */
var _, _minhtml, butil, color, config, cssBgMap, cssmap, e, errrHandler, fs, getJSONSync, gulp, gutil, hashMaps, imgRoot, include, jsdistmap, jsmap, minifyHTML, path, plumber;

fs = require('fs');

path = require('path');

_ = require('lodash');

gulp = require('gulp');

plumber = require('gulp-plumber');

gutil = require('gulp-util');

config = require('../config');

butil = require('./butil');

getJSONSync = butil.getJSONSync;

errrHandler = butil.errrHandler;

color = gutil.colors;

include = require('./include');

minifyHTML = require('gulp-minify-html');

cssBgMap = {};

jsmap = {};

jsdistmap = {};

cssmap = {};

try {
  cssBgMap = getJSONSync(path.join(config.mapPath, config.cssBgMap));
  jsmap = getJSONSync(path.join(config.mapPath, config.jsMapName));
  jsdistmap = getJSONSync(path.join(config.mapPath, config.jsDistMapName));
  cssmap = getJSONSync(path.join(config.mapPath, config.cssMapName));
} catch (_error) {
  e = _error;
}

hashMaps = butil.objMixin(jsmap, jsdistmap, cssmap);

imgRoot = config.staticRoot + config.imgDistPath.replace('../', '');

_minhtml = function(data) {
  var _name, _outputPath, _path, _soure, imgReg;
  try {
    _path = String(data.path).replace(/\\/g, '/');
    if (_path.indexOf("/" + config.views + "_") > -1) {
      return false;
    }
    _name = _path.split("/" + config.theme + "/" + config.views)[1];
    _outputPath = path.join(config.htmlTplDist, _name);
    _soure = String(data.contents);
    imgReg = /<img\s[^(src)]*\s*src="([^"]*)"/g;
    _soure = _soure.replace(imgReg, function(str, map) {
      var key, val;
      if (map.indexOf('http://') !== -1) {
        return str;
      } else {
        key = map.replace('_img/', '').replace(/(^\'|\")|(\'|\"$)/g, '');
        val = imgRoot + (_.has(cssBgMap, key) ? cssBgMap[key].distname : key + '?=t' + String(new Date().getTime()).substr(0, 8));
        return str.replace(map, val);
      }
    });
    if (config.evn !== 'dev' && config.evn !== 'debug') {
      gutil.log(color.cyan("\'" + _name + "\'"), "combined.");
      _soure = _soure.replace(/\/\*([\s\S]*?)\*\//g, '').replace(/^\s+$/g, '').replace(/\t/g, '');
    }
    butil.mkdirsSync(path.dirname(_outputPath));
    return fs.writeFileSync(path.join(_outputPath), _soure, 'utf8');
  } catch (_error) {
    e = _error;
    return console.log(e);
  }
};

module.exports = function(file, cb) {
  var files, opts;
  if (typeof file === 'function') {
    files = config.htmlTplSrc + "**/*.html";
    cb = file;
  } else {
    files = file || (config.htmlTplSrc + "**/*.html");
    cb = cb || function() {};
  }
  gutil.log(color.yellow("Combine html templates..."));
  opts = {
    prefix: '@@',
    basepath: '@file',
    evn: config.evn,
    isCombo: config.isCombo,
    staticRoot: config.staticRoot,
    staticPaths: {
      css: {
        src: config.cssOutPath,
        dist: config.cssDistPath
      },
      js: {
        src: config.jsOutPath,
        dist: config.jsDistPath
      }
    },
    hashmap: hashMaps
  };
  return gulp.src([files]).pipe(plumber({
    errorHandler: errrHandler
  })).pipe(include(opts)).on("data", function(data) {
    return _minhtml(data);
  }).on("end", function() {
    gutil.log(color.green("Html templates done!"));
    return cb();
  });
};
