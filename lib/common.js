// Generated by CoffeeScript 1.9.3

/*
 * 一些公共的处理逻辑
 */
var _, butil, color, config, cssBgMap, cssmap, e, env, fs, getJSONSync, gutil, imgPath, imgReg, isDebug, jsdistmap, path, srcReg;

fs = require('fs');

path = require('path');

_ = require('lodash');

gutil = require('gulp-util');

color = gutil.colors;

butil = require('./butil');

config = require('./config');

getJSONSync = butil.getJSONSync;

env = config.env;

isDebug = config.isDebug;

cssBgMap = {};

jsdistmap = {};

cssmap = {};

try {
  cssBgMap = getJSONSync(path.join(config.mapPath, config.cssBgMap));
  jsdistmap = getJSONSync(path.join(config.mapPath, config.jsDistMapName));
  cssmap = getJSONSync(path.join(config.mapPath, config.cssMapName));
} catch (_error) {
  e = _error;
}

imgPath = config.imgPath;

imgReg = /<img[\s\S]*?[^(src)]src=('|")([^'|^"]*)('|")/g;

srcReg = /src=('|")([^'|^"]*)('|")/;

exports.hashMaps = butil.objMixin(jsdistmap, cssmap);

exports.getHashMaps = function() {
  var _cssBgMap, _cssmap, _hashMaps, _jsdistmap;
  _jsdistmap = {};
  _cssmap = {};
  try {
    _cssBgMap = getJSONSync(path.join(config.mapPath, config.cssBgMap));
    _jsdistmap = getJSONSync(path.join(config.mapPath, config.jsDistMapName));
    _cssmap = getJSONSync(path.join(config.mapPath, config.cssMapName));
  } catch (_error) {
    e = _error;
  }
  _hashMaps = butil.objMixin(_jsdistmap, _cssmap);
  return _hashMaps;
};

exports.refCssBgMap = function(map) {
  if (map) {
    cssBgMap = map;
    return exports.cssBgMap = map;
  }
};

exports.getCssBgMap = function() {
  return cssBgMap;
};

exports.replaceImg = function(source, type) {
  var _type, file_source;
  _type = type || '';
  file_source = source.replace(imgReg, function(str) {
    var key, map, val;
    map = '';
    str.replace(srcReg, function(s) {
      return map = s.replace(/^src=/, '').replace(/(\'|\")|(\'|\"$)/g, '');
    });
    if (map.indexOf('/_img/') !== 0 || map.indexOf('http://') === 0 || map.indexOf('data:') === 0 || map.indexOf('/<?php/') !== -1) {
      return str;
    } else {
      key = map.replace('/_img/', '').replace(/(^\'|\")|(\'|\"$)/g, '');
      val = imgPath + (_.has(cssBgMap, key) && env !== 'local' ? cssBgMap[key].distname : key + '?=t' + String(new Date().getTime()).substr(0, 8));
      return str.replace(map, val);
    }
  });
  return file_source;
};

exports.htmlMinify = function(source) {
  var _source;
  _source = source.replace(/\/\*([\s\S]*?)\*\//g, '').replace(/<!--([\s\S]*?)-->/g, '').replace(/^\s+$/g, '').replace(/\n/g, '').replace(/\t/g, '').replace(/\r/g, '').replace(/\n\s+/g, ' ').replace(/\s+/g, ' ').replace(/>([\n\s]*?)</g, '><').replace(/<?phpforeach/g, '<?php foreach').replace(/<?phpecho/g, '<?php echo');
  return _source;
};
