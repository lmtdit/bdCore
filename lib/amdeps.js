// Generated by CoffeeScript 1.9.1

/**
 * AMD模块依赖表的构建类
 * @date 2014-12-2 15:10:14
 * @author pjg <iampjg@gmail.com>
 * @link http://pjg.pw
 * @version $Id$
 */
var _, color, config, filterDepMap, fs, gutil, jsDepBuilder, path, tryEval,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

config = require('../config');

_ = require('lodash');

gutil = require('gulp-util');

color = gutil.color;


/* '[ ]'标志符内的依赖字符串转化为数组 */

tryEval = function(str) {
  var err, json;
  try {
    return json = eval('(' + str + ')');
  } catch (_error) {
    err = _error;
  }
};


/* 过滤依赖表里的关键词，排除空依赖 */

filterDepMap = function(depMap) {
  depMap = depMap.filter(function(dep) {
    return ["require", "exports", "module", "jquery", ""].indexOf(dep) === -1;
  });
  return depMap.map(function(dep) {
    return dep.replace(/\.js$/, '');
  });
};


/* AMD模块的依赖构建工具类库 */

jsDepBuilder = (function() {
  function jsDepBuilder() {
    this.makeRelateList = bind(this.makeRelateList, this);
    this.makeDeps = bind(this.makeDeps, this);
    this.allJsDep = bind(this.allJsDep, this);
    this.oneJsDep = bind(this.oneJsDep, this);
  }

  jsDepBuilder.prototype.srcPath = config.jsSrcPath;

  jsDepBuilder.prototype.amdRegex = /;?\s*define\s*\(([^(]*),?\s*?function\s*\([^\)]*\)/;

  jsDepBuilder.prototype.depArrRegex = /^[^\[]*(\[[^\]\[]*\]).*$/;

  jsDepBuilder.prototype.oneJsDep = function(file_path, file_name) {
    var _amdRegex, _depArrRegex, _filePath, _jscontents, _list;
    _list = [];
    _amdRegex = this.amdRegex;
    _depArrRegex = this.depArrRegex;
    _filePath = path.join(file_path, file_name);
    _jscontents = fs.readFileSync(_filePath, 'utf8').toString();
    _jscontents.replace(_amdRegex, function(str, map) {
      var arr, depStr, error;
      depStr = map.replace(_depArrRegex, "$1");
      if (/^\[/.test(depStr)) {
        arr = tryEval(depStr);
        try {
          return _list = filterDepMap(arr);
        } catch (_error) {
          error = _error;
        }
      }
    });
    return _list;
  };

  jsDepBuilder.prototype.allJsDep = function() {
    var _oneJsDep, _srcPath, depMap;
    depMap = {};
    _srcPath = this.srcPath;
    _oneJsDep = this.oneJsDep;
    fs.readdirSync(_srcPath).forEach(function(v) {
      var jsPath;
      jsPath = path.join(_srcPath, v);
      if (fs.statSync(jsPath).isDirectory()) {
        return fs.readdirSync(jsPath).forEach(function(f) {
          var fileDep, jsPath_lv2, name;
          if (f.indexOf('.') !== 0 && f.indexOf('.js') !== -1) {
            fileDep = _oneJsDep(jsPath, f);
            name = f.replace('.js', '');
            return depMap[v + "/" + name] = fileDep;
          } else if (f.indexOf('.coffee') === -1) {
            jsPath_lv2 = path.join(jsPath, f);
            if (fs.statSync(jsPath_lv2).isDirectory()) {
              return fs.readdirSync(jsPath_lv2).forEach(function(ff) {
                var name_lv2;
                if (ff.indexOf('.') !== 0 && ff.indexOf('.js') !== -1) {
                  name_lv2 = ff.replace('.js', '');
                  fileDep = _oneJsDep(jsPath_lv2, ff);
                  return depMap[v + "/" + f + "/" + name_lv2] = fileDep;
                }
              });
            }
          }
        });
      }
    });
    return depMap;
  };

  jsDepBuilder.prototype.makeDeps = function() {
    var _allDeps, _alljsDep, _depLibs, _file, _lib, _list, _tempArr, depList, file, i, len, makeDep;
    _allDeps = {};
    _depLibs = [];
    _alljsDep = this.allJsDep();
    makeDep = function(deps) {
      var _list, make;
      _list = [];
      make = function(deps) {
        return deps.forEach(function(dep) {
          var currDeps;
          currDeps = _alljsDep[dep];
          if (currDeps || dep.indexOf("/") !== -1) {
            make(currDeps);
          }
          return _list.push(dep);
        });
      };
      make(deps);
      return _list;
    };
    for (file in _alljsDep) {
      depList = _alljsDep[file];
      _allDeps[file] = {};
      _list = [];
      _lib = [];
      if (depList.length > 0) {
        _tempArr = makeDep(depList);
        _tempArr = _.union(_tempArr);
        for (i = 0, len = _tempArr.length; i < len; i++) {
          _file = _tempArr[i];
          if (indexOf.call(_list, _file) < 0 && _file.indexOf("/") !== -1) {
            _list.push(_file);
          } else {
            if (indexOf.call(_lib, _file) < 0) {
              _lib.push(_file);
            }
          }
          if (_file.indexOf("/") === -1) {
            _depLibs.push(_file);
          }
        }
      }
      _allDeps[file] = {
        modList: _list,
        libList: _lib
      };
    }
    return {
      allDeps: _allDeps,
      depLibs: _depLibs
    };
  };

  jsDepBuilder.prototype.makeRelateList = function(module_name) {
    var _allDeps, _depLibs, _list, _makeDeps, _module_name, deps, module;
    _module_name = module_name;
    if (_module_name.indexOf("/") === -1 || _module_name.indexOf('.') === 0) {
      gutil.log(color.red(_module_name), "not an AMD module");
      return false;
    }
    _list = [];
    _makeDeps = this.makeDeps();
    _allDeps = _makeDeps.allDeps;
    _depLibs = _makeDeps.depLibs;
    for (module in _allDeps) {
      deps = _allDeps[module];
      if (indexOf.call(deps.modList, _module_name) >= 0 || module === _module_name) {
        _list.push(module);
      }
    }
    return _list;
  };

  return jsDepBuilder;

})();

exports.bder = jsDepBuilder;
